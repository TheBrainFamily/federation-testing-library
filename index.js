const {
  LocalGraphQLDataSource,
  buildOperationContext,
  buildQueryPlan,
  executeQueryPlan
} = require("@apollo/gateway");
const { addMockFunctionsToSchema } = require("graphql-tools");
const { addResolversToSchema } = require("apollo-graphql");

const { buildFederatedSchema, composeServices } = require("@apollo/federation");

function buildLocalService(modules) {
  const schema = buildFederatedSchema(modules);
  return new LocalGraphQLDataSource(schema);
}

function buildRequestContext(variables, context) {
  return {
    cache: undefined,
    context,
    request: {
      variables
    }
  };
}

const setupSchema = services => {
  let serviceMap = {};
  services.forEach(service => {
    let serviceName = Object.keys(service)[0];
    serviceMap[serviceName] = buildLocalService([service[serviceName]]);
    serviceMap[serviceName].__underTest__ = service[serviceName].underTest;
  });

  let mapForComposeServices = Object.entries(serviceMap).map(
    ([serviceName, service]) => ({
      name: serviceName,
      typeDefs: service.sdl()
    })
  );

  let composed = composeServices(mapForComposeServices);

  if (composed.errors && composed.errors.length > 0) {
    throw new Error(JSON.stringify(composed.errors));
  }
  return { schema: composed.schema, serviceMap };
};

function setupMocks(serviceMap, mocks) {
  Object.values(serviceMap).forEach(service => {
    let resolvers = {};
    if (!service.__underTest__) {
      Object.entries(mocks).forEach(([type, value]) => {
        resolvers[type] = {
          __resolveReference() {
            return value();
          }
        };
      });
      addResolversToSchema(service.schema, resolvers);
      addMockFunctionsToSchema({
        schema: service.schema,
        preserveResolvers: true,
        mocks
      });
    }
  });
}

function execute(schema, query, mutation, serviceMap, variables, context) {
  const operationContext = buildOperationContext(schema, query || mutation);
  const queryPlan = buildQueryPlan(operationContext);

  return executeQueryPlan(
    queryPlan,
    serviceMap,
    buildRequestContext(variables, context),
    operationContext
  );
}

const executeGraphql = ({
  query,
  mutation,
  variables,
  context,
  services,
  mocks = {},
  schema,
  serviceMap
}) => {
  if (services) {
    ({ schema, serviceMap } = setupSchema(services));
  } else {
    if (!schema) {
      throw new Error(
        "You need to pass either services array to prepare your schema, or the schema itself, generated by the setupSchema function"
      );
    }
    if (!serviceMap) {
      throw new Error(
        "You need to pass the serviceMap generated by the setupSchema function along with your schema"
      );
    }
  }

  setupMocks(serviceMap, mocks);

  return execute(schema, query, mutation, serviceMap, variables, context);
};

module.exports = {
  setupSchema,
  executeGraphql
};
